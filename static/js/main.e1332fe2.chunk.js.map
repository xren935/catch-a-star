{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","constant.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","spacex_logo","alt","Component","SAT_API_KEY","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatSetting","Form","create","name","mySatSettingFunc","SatelliteList","onChange","target","dataInfo","checked","selected","state","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","onShowSatMap","console","log","onShowMap","isLoad","satList","satInfo","above","size","disabled","length","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","showMap","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","error","Footer","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e1332fe2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.ad25dfff.svg\";","import React, { Component } from \"react\";\nimport spacex_logo from \"../assets/images/spacex_logo.svg\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"title\">&nbsp;&nbsp;&nbsp;&nbsp;NPM Star ✨</p>\n      </header>\n    );\n  }\n}\nexport default Header;\n","export const SAT_API_KEY = \"GUHCUW-PUZ62B-2ECFT8-4NVY\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import React, { Component } from \"react\";\nimport { Form, Button, InputNumber } from \"antd\";\n\nclass SatSettingForm extends Component {\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 11 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 13 }\n      }\n    };\n    return (\n      <Form\n        {...formItemLayout}\n        className=\"sat-setting\"\n        onSubmit={this.showSatellite}\n      >\n        <Form.Item label=\"Longitude(degrees)\">\n          {getFieldDecorator(\"longitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Longitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              min={-180}\n              max={180}\n              style={{ width: \"100%\" }}\n              placeholder=\"Please input Longitude\"\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Latitude(degrees)\">\n          {getFieldDecorator(\"latitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Latitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Latitude\"\n              min={-90}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Elevation(meters)\">\n          {getFieldDecorator(\"elevation\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Elevation\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Elevation\"\n              min={-413}\n              max={8850}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Altitude(degrees)\">\n          {getFieldDecorator(\"altitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Altitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Altitude\"\n              min={0}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Duration(secs)\">\n          {getFieldDecorator(\"duration\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Duration\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Duration\"\n              min={0}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n        <Form.Item className=\"show-nearby\">\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"sat-btn\"\n            style={{ textAlign: \"center\" }}\n          >\n            Find Nearby Satellite\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n\n  showSatellite = e => {\n    // preventDefault method stops the default submit requst \n    e.preventDefault();\n    // validate field \n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props.onShow(values);\n      }\n    });\n  };\n}\n\n// const SatSetting = Form.create({ name: \"satellite-setting\" })(SatSettingForm);\nvar mySatSettingFunc = Form.create({ name: \"satellite-setting\" });\nconst SatSetting = mySatSettingFunc(SatSettingForm);\n\nexport default SatSetting;\n","export default __webpack_public_path__ + \"static/media/satellite.057df29c.svg\";","// import React, {Component} from 'react';\n// import { List, Avatar, Button, Checkbox, Spin } from 'antd';\n// import satellite from \"../assets/images/satellite.svg\";\n\n// class SatelliteList extends Component {\n//     constructor(){\n//         super();\n//         this.state = {\n//             selected: [],\n//             isLoaded: false\n//         };\n//     }\n\n//     onShowSatMap = () =>{\n//         this.props.onShowMap(this.state.selected);\n//     }\n\n//     render() {\n//         const satList = this.props.satInfo ? this.props.satInfo.above : [];\n//         const { isLoaded } = this.props;\n//         const { selected } = this.state;\n//         console.log(this.state);\n\n//         return (\n//             <div className=\"sat-list-box\">\n//                 <Button className=\"sat-list-btn\" onClick={this.onShowSatMap} disabled={selected.length === 0}>\n//                     Track on the map\n//                 </Button>\n//                 <hr/>\n\n//                 {\n//                     isLoaded ?\n//                         <div className=\"spin-box\">\n//                             <Spin tip=\"Loading...\" size=\"large\" />\n//                         </div>\n//                         :\n//                         <List\n//                             className=\"sat-list\"\n//                             itemLayout=\"horizontal\"\n//                             size=\"small\"\n//                             dataSource={satList}\n//                             renderItem={item => (\n//                                 <List.Item\n//                                     actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n//                                 >\n//                                     <List.Item.Meta\n//                                         avatar={<Avatar size={50} src={satellite} />}\n//                                         title={<p>{item.satname}</p>}\n//                                         description={`Launch Date: ${item.launchDate}`}\n//                                     />\n\n//                                 </List.Item>\n//                             )}\n//                         />\n//                 }\n//             </div>\n//         );\n//     }\n\n\n//     // showMap = () => {\n//     //     const { selected } = this.state;\n//     //     this.props.onShowMap(selected);\n//     // }\n\n//     // adding/removing sats from the list\n//     addOrRemove = (sat, status, list) => {\n//         // check if it's already in selected \n//             // add if status is true and is not in list \n//         // use array.some(item => item == value) to determin if sat is in list \n//         const found = list.some(item => item.satid === sat.saitid);\n//         if(status && !found){\n//             // add to the list \n//             list = [...list, sat];\n//         }\n//         if(!status && found){\n//             // remove from the list \n//             list = list.filter(item => item.satid !== sat.satid);\n//         }\n//         return list;\n//     }\n\n//     // for the checkbox \n//     onChange = e => {\n//         // get datainfo and checkbox status \n//         const {dataInfo, checked } = e.target; \n\n//         // add/remove selected satellite to/from selected array\n//         const { selected } = this.state; \n//         const list = this.addOrRemove(dataInfo, checked, selected); \n\n//         // update by se{tting the state \n//         this.setState({\n//             selected: list\n//         })\n//     }\n\n//     componentDidUpdate(prevProps, prevState, snapshot) {\n//         if(prevProps.satInfo !== this.props.satInfo) {\n//             this.setState({selected: []})\n//         }\n//     }\n// }\n\n// export default SatelliteList;\nimport React, {Component} from 'react';\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n    constructor(){\n        super();\n        this.state = {\n            selected: [],\n            isLoad: false\n        };\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({ selected: list })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid);\n        if(status && !found){\n            list.push(item)\n        }\n\n        if(!status && found){\n            list = list.filter( entry => {\n                return entry.satid !== item.satid;\n            });\n        }\n        return list;\n    }\n\n    onShowSatMap = () =>{\n        console.log(\"show track\");\n        console.log(this.state.selected);\n        this.props.onShowMap(this.state.selected);\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const { isLoad } = this.props;\n        const { selected } = this.state;\n\n        return (\n            <div className=\"sat-list-box\">\n                <div className=\"btn-container\">\n                   <Button\n                     className=\"sat-list-btn\"\n                     size=\"large\"\n                     disabled={selected.length === 0}\n                     onClick={this.onShowSatMap}\n                   >\n            Track on the map\n          </Button>\n        </div>\n                <hr/>\n\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\" />\n                        </div>\n                        :\n                        <List\n                            className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                            size=\"small\"\n                            dataSource={satList}\n                            renderItem={item => (\n                                <List.Item\n                                    actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={<Avatar size={50} src={satellite} />}\n                                        title={<p>{item.satname}</p>}\n                                        description={`Launch Date: ${item.launchDate}`}\n                                    />\n\n                                </List.Item>\n                            )}\n                        />\n                }\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constant\";\n\nimport \"../styles/WorldMap.css\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Row, Col } from \"antd\";\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constant\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      satInfo: null,\n      satList: null,\n      setting: null,\n      isLoadingList: false\n    };\n  }\n  render() {\n    const { isLoadingList, satInfo, satList, setting } = this.state;\n    return (\n      <Row className=\"main\">\n        <Col span={8} className=\"left-side\">\n          <SatSetting onShow={this.showNearbySatellite} />\n          <SatelliteList\n            isLoad={isLoadingList}\n            satInfo={satInfo}\n            onShowMap={this.showMap}\n          />\n        </Col>\n        <Col span={16} className=\"right-side\">\n          <WorldMap satData={satList} observerData={setting} />\n        </Col>\n      </Row>\n    );\n  }\n\n  showMap = selected => {\n    this.setState(preState => ({\n      ...preState,\n      satList: [...selected]\n    }));\n  };\n\n  showNearbySatellite = setting => {\n    this.setState({\n      isLoadingList: true,\n      setting: setting\n    });\n    this.fetchSatellite(setting);\n  };\n\n  fetchSatellite = setting => {\n    const { latitude, longitude, elevation, altitude } = setting;\n    const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n    this.setState({\n      isLoadingList: true\n    });\n\n    axios\n      .get(url)\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          satInfo: response.data,\n          isLoadingList: false\n        });\n      })\n      .catch(error => {\n        console.log(\"err in fetch satellite -> \", error);\n      });\n  };\n}\n\nexport default Main;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 NPM-Star. All Rights Reserved. Made with 💙 by <a href=\"https://annie-ren.ca\">Annie Ren</a>.\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}